name: Setup Remote Desktop

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Download Ngrok
        run: |
          Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip

      - name: Extract Ngrok
        run: |
          Expand-Archive -Path ngrok.zip -DestinationPath .

      - name: Auth Ngrok
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          .\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN

      - name: Enable TS
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

      - name: Enable Firewall Rule for Remote Desktop
        run: |
          New-NetFirewallRule -DisplayName "Allow RDP" -Direction Inbound -Protocol TCP -LocalPort 3389 -Action Allow -Enabled True

      - name: Restart Remote Desktop Services
        run: |
          Set-Service -Name TermService -StartupType Automatic
          Restart-Service -Name TermService -Force

      - name: Create User
        shell: pwsh
        run: |
          $password = ConvertTo-SecureString -AsPlainText "123456abcZ" -Force
          if (-not (Get-LocalUser -Name "remoteadmin" -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name "remoteadmin" -Password $password -FullName "Remote Admin" -Description "User for Remote Desktop Access"
          }
          Set-LocalUser -Name "remoteadmin" -Password $password
          Add-LocalGroupMember -Group "Administrators" -Member "remoteadmin"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "remoteadmin"

      - name: Verify RDP Service is Running
        run: |
          timeout /t 30 /nobreak
          Get-Service -Name TermService | Select-Object Status

      - name: Start Ngrok Tunnel and Get URL
        id: ngrok_tunnel
        run: |
          $ngrok_output = .\ngrok.exe tcp 3389 --region ap | Out-String
          $url_match = $ngrok_output | Select-String -Pattern 'tcp://[0-9a-z\-]+\.tcp\.ap\.ngrok\.io:\d+'
          if ($url_match) {
            $url = $url_match.Matches[0].Value
            echo "::set-output name=ngrok_url::$url"
            Write-Host "Ngrok URL: $url"
          } else {
            Write-Error "Failed to extract Ngrok URL"
          }

      - name: Output Ngrok URL
        run: |
          echo "Ngrok URL: ${{ steps.ngrok_tunnel.outputs.ngrok_url }}"
